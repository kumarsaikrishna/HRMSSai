@model IEnumerable<AttendanceCRM.Models.Entities.WorkEntryViewModel>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<script>
    $(document).ready(function () {
        $("#endTime").change(function () {
            var startTime = $("#startTime").val();
            var endTime = $("#endTime").val();

            if (startTime && endTime) {
                var start = new Date("2000-01-01T" + startTime);
                var end = new Date("2000-01-01T" + endTime);

                var diff = (end - start) / 60000; // Convert milliseconds to minutes

                if (diff >= 0) {
                    $("#taskTime").val(diff);
                } else {
                    alert("End time must be greater than start time!");
                    $("#taskTime").val("");
                }
            }
        });

        $("#addTaskBtn").click(function () {
            var taskName = $("#taskName").val();
            var taskDescription = $("#taskDescription").val();
            var taskTime = $("#taskTime").val();
            var taskStatus = $("#taskStatus").val();
            var projectId = $("#ProjectId").val();

            // // Convert taskTime to an integer (ensure valid input)
            // var timeSpent = parseInt(taskTime, 10);
            // if (isNaN(timeSpent) || timeSpent <= 0) {
            //     alert("Invalid Time Spent value.");
            //     return;
            // }

            // // Convert ProjectId to integer if needed
            // var projectID = parseInt(projectId, 10);
            // if (isNaN(projectID)) {
            //     projectID = null; // Handle cases where it's optional
            // }

            // / Validate required fields
            // if (!taskName || !taskTime) {
            //     alert("Please fill in Task Name and Time Spent.");
            //     return;
            // }

            if (taskName && taskTime) {
                var taskData = {
                    TaskName: taskName,
                    Description: taskDescription,
                    TimeSpent: parseInt(taskTime),
                    Status: taskStatus,
                    ProjectId: projectId,
                };

               

               

                var saveTaskUrl = $("#saveTaskUrl").val();

                $.ajax({
                    url: saveTaskUrl,
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(taskData),
                    dataType: "json",
                    success: function (response) {
                        if (response.success) {
                            var taskItem = `<div class="alert alert-light border d-flex justify-content-between taskItem">
                                                <div>
                                                    <strong>${projectId}</strong>
                                                    <strong>${taskName}</strong> - ${taskDescription}<br>
                                                    ⏳ Time spent: <span class="taskTime">${taskTime}</span> minutes | Status: <span class="badge badge-secondary taskStatus">${taskStatus}</span>
                                                </div>
                                                <button class="btn btn-sm btn-danger deleteTask">🗑</button>
                                            </div>`;
                         
                            $("#taskList").append(taskItem);
                            $("#taskName").val("");
                            $("#taskDescription").val("");
                            $("#taskTime").val("");
                            $("#taskStatus").val("Planned");
                            window.location.reload();

                        } else {
                            alert("Failed to save task. Please try again.");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX Error:", xhr.responseText);
                        alert("Error while saving task. Please check your network.");
                    }
                });
            } else {
                alert("Please fill in Task Name and Time Spent.");
            }
        });

        $(document).on("click", ".deleteTask", function () {
            $(this).parent().remove();
        });
        function formatTimeTo12Hour(time) {
            var [hours, minutes] = time.split(":");
            hours = parseInt(hours);
            var ampm = hours >= 12 ? "PM" : "AM";
            hours = hours % 12 || 12; // Convert 0 to 12 for 12 AM
            return hours + ":" + minutes + " " + ampm;
        }
        $("#startTime").change(function () {
            console.log("Start Time (12hr Format):", formatTimeTo12Hour(this.value));
        });

        $("#endTime").change(function () {
            console.log("End Time (12hr Format):", formatTimeTo12Hour(this.value));
        });

        $("#datePicker").on("change", function () {
            var selectedDate = $(this).val();
            var saveTaskUrlll = $("#saveTaskUrlll").val();
             $.ajax({
                url: saveTaskUrlll,
                type: "GET",
                data: { date: selectedDate },
                success: function (response) {
                    $("#taskContainer").html(response.tasksHtml); 
                    $("#totalTime").html("<h4>" + response.totalTime + " Minutes</h4>");
                    $("#completedTasks h5").text(response.completedTasks);
                    $("#inProgressTasks h5").text(response.inProgressTasks);
                    $("#plannedTasks h5").text(response.plannedTasks);
                },
                error: function () {
                    alert("Error fetching tasks!");
                }
            });
        });


      

        
    });
   
   
</script>

<script>
    $(document).on("click", ".delete-Task", function () {
        var id = $(this).data("id");
        var row = $(this).closest("tr");

        Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to delete this Task?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/DailyTask/DeleteTask',
                    type: 'POST',
                    data: { id: id },
                    success: function (response) {
                        if (response.success) {
                            Swal.fire(
                                'Deleted!',
                                'Task has been deleted.',
                                'success'
                            );
                            row.fadeOut(500, function () {
                                $(this).remove();
                            });
                        } else {
                            Swal.fire(
                                'Failed!',
                                'Something went wrong.',
                                'error'
                            );
                        }
                    },
                    error: function () {
                        Swal.fire(
                            'Error!',
                            'Server error occurred.',
                            'error'
                        );
                    }
                });
            }
        });
    });

</script>
<script>
    $(document).on("click", ".edit-Task", function () {
        var id = $(this).data("id");

        // First, get the current data from server
        $.ajax({
            url: '/DailyTask/GetTaskById',
            type: 'GET',
            data: { id: id },
            success: function (data) {
                Swal.fire({
                    title: 'Edit Task',
                    html:
                        `<input id="swal-input1" class="swal2-input" value="${data.title}" placeholder="Title">
                             <textarea id="swal-input2" class="swal2-textarea" placeholder="Description">${data.description}</textarea>`,
                    focusConfirm: false,
                    showCancelButton: true,
                    preConfirm: () => {
                        const title = $('#swal-input1').val();
                        const description = $('#swal-input2').val();

                        if (!title.trim()) {
                            Swal.showValidationMessage('Title is required');
                            return false;
                        }

                        return { title, description };
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Send updated data back to server
                        $.ajax({
                            url: '/DailyTask/UpdateTask',
                            type: 'POST',
                            data: {
                                id: id,
                                title: result.value.title,
                                description: result.value.description
                            },
                            success: function (response) {
                                if (response.success) {
                                    Swal.fire('Updated!', 'Task updated successfully.', 'success').then(() => {
                                        location.reload(); // or update DOM without reload
                                    });
                                } else {
                                    Swal.fire('Failed!', 'Update failed.', 'error');
                                }
                            }
                        });
                    }
                });
            }
        });
    });
</script>



 
<div class="container mt-4">
    <h3>📅 Daily Work Sheet</h3>

    <div class="d-flex justify-content-end">
        <input type="date" id="datePicker" class="form-control w-25" />
        <input type="hidden" id="saveTaskUrl" value="@Url.Action("SaveTask", "DailyTask")" />
        <input type="hidden" id="saveTaskUrlll" value="@Url.Action("FilterTasksByDate", "DailyTask")" />
        <input type="hidden" id="saveTaskUrll" value="@Url.Action("DeleteTask", "DailyTask")" />

    </div>

    <div class="row mt-3">
        <div class="col-md-8">
            <div class="card p-3 shadow-sm">
                <div class="card-header">
                    <h5>⏳ Work Entries</h5>
                </div>
                <div class="">
                    <div class="col-md-12">
                        <div class="form-group row">
                            <div class="col-sm-3">
                                <label class="main-content-label tx-13 tx-medium tx-gray-600">Projects</label><span class="text-danger">*</span>
                                <select class="form-control" name="ProjectId" id="ProjectId">
                                    <option selected disabled>--Select Project--</option>
                                    @foreach (var v in ViewBag.pp)
                                    {
                                        <option value="@v.ProjectId">
                                            @v.ProjectName
                                        </option>


                                    }
                                </select>
                            </div>
                            
                            <div class="col-sm-3">
                                <label class="main-content-label tx-13 tx-medium tx-gray-600">Start Time</label>
                                <input type="time" id="startTime" class="form-control" />

                            </div>
                             <div class="col-sm-3">
                                <label class="main-content-label tx-13 tx-medium tx-gray-600">End Time</label>
                                <input type="time" id="endTime" class="form-control" />

                            </div>
                            
                    
                            <div class="col-sm-3">
                                <label class="main-content-label tx-13 tx-medium tx-gray-600">Time Spent</label>
                                <input type="number" id="taskTime" class="form-control" placeholder="Minutes Spent" readonly />

                            </div>
                        </div>
                    </div>
                   @*  <div class="mb-2 pt-4">
                        <label class="main-content-label tx-13 tx-medium tx-gray-600">Projects</label><span class="text-danger">*</span>
                        <select class="form-control" name="ProjectId" id="ProjectId">
                            <option selected disabled>--Select Project--</option>
                            @foreach (var v in ViewBag.pp)
                            {   <option value="@v.ProjectId">
                                        @v.ProjectName
                                    </option>
                                
                                
                            }
                        </select>
                    </div>  *@
                    <div class="mb-2 pt-4">
                        <label>Enter Your Daily Task Name</label>
                        <input type="text" id="taskName" class="form-control" placeholder="Enter task name" />
                    </div>
                    <div class="mb-2">
                        <label>Description</label>
                        <textarea id="taskDescription" class="form-control" placeholder="Enter task description"></textarea>
                    </div>
                   @*  <div class="mb-2">
                        <label>Start Time</label>
                        <input type="time" id="startTime" class="form-control" />
                    </div>

                    <div class="mb-2">
                        <label>End Time</label>
                        <input type="time" id="endTime" class="form-control" />
                    </div>

                    <div class="mb-2">
                        <label>Time Spent (minutes)</label>
                        <input type="number" id="taskTime" class="form-control" placeholder="Minutes Spent" readonly />
                    </div>
 *@

                    <div class="mb-2">
                        <label>Status</label>
                        <select id="taskStatus" class="form-control">
                            <option value="Planned">Planned</option>
                            <option value="In Progress">In Progress</option>
                            <option value="Completed">Completed</option>
                            <option value="Break">Break</option>
                        </select>
                    </div>
                    <button id="addTaskBtn" class="btn btn-primary">+ Add Entry</button>
                </div>

            </div>

             

        </div>

        @{
            int totalMinutes = Model.Sum(t => t.TimeSpent);
            TimeSpan timeSpent = TimeSpan.FromMinutes(totalMinutes);
            string formattedTimeSpent = $"{(int)timeSpent.TotalHours}h {timeSpent.Minutes}m";
            var totalTimeSpent = Model.Sum(item => item.TimeSpent);
            var completedTasks = Model.Count(item => item.Status == "Completed");
            var inProgressTasks = Model.Count(item => item.Status == "In Progress");
            var plannedTasks = Model.Count(item => item.Status == "Planned");
            var Break = Model.Count(item => item.Status == "Break");
            var totalRecords = Model.Count();

            // var toall = Model.Count(Status);
        }
        <div class="col-md-4">
            <div class="card p-3 shadow-sm">
                <div class="card-header">
                    <h5>📊 Daily Summary</h5>
                </div>

                <div class="">
                    <div>
                        <div class="callout callout-info" id="totalTime">
                            <p>Total Time</p>
                            <h4>@formattedTimeSpent Minutes</h4>
                        </div>
                        <div class="d-flex">
                            <div class="m-2 bg-soft-info mx-auto color-container shadow-none" id="completedTasks">
                                <p> Completed</p>
                                <h5>@completedTasks</h5>
                            </div>

                            <div class="m-2 bg-soft-success mx-auto color-container shadow-none" id="inProgressTasks">
                                <p>Progress</p>
                                <h5> @inProgressTasks</h5>
                            </div>

                            <div class="m-2 bg-soft-danger mx-auto color-container shadow-none" id="plannedTasks">
                                <p> Planned</p>
                                <h5>@plannedTasks</h5>
                            </div>
                            <div class="m-2 bg-soft-primary mx-auto color-container shadow-none">
                                <p>Break</p>
                                <h5>@Break</h5>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="card-footer">
                    <div class="">
                        <p>
                            <b>
                                Quick Status
                            </b>
                        </p>
                        <p>
                            Average time per task: @formattedTimeSpent minutes <br />
                            Total tasks: @totalRecords
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-12">
            <div class="card p-3 shadow-sm">

                <h5 class="mb-2">📋 Work List</h5>
                <div class="row mt-3 mb-4" id="taskContainer">
                    @foreach (var item in Model)
                    {
                        <div class="col-md-4">
                            <div class="">
                                <ul id="workList" class="list-group">
                                    <li class="list-group-item d-flex justify-content-between mb-2">
                                        <div>
                                            <p><strong>@item.ProjectName</strong></p>
                                            <p><strong>@item.TaskName</strong></p>
                                            <p>
                                                <span>
                                                    @item.Description <br>

                                                </span>
                                            </p>
                                            <p>
                                                ⏳ Time spent: <span class="taskTime">
                                                    @(TimeSpan.FromMinutes(item.TimeSpent).Hours)h @(TimeSpan.FromMinutes(item.TimeSpent).Minutes)m
                                                </span> | Status: <span class="badge badge-secondary taskStatus">@item.Status</span>
                                            </p>
                                        </div>

                                        <div>
                                            <button class="btn btn-primary btn-sm edit-Task" data-id="@item.Id">✏️</button>
                                            <button class="btn btn-danger btn-sm delete-Task" data-id="@item.Id">❌</button>
                                        </div>



                                    </li>
                                </ul>
                            </div>
                        </div>
                    }

                </div>
            </div>

        </div>

       @*  <div class="col-md-4">
            <div class="card p-3 mb-4 shadow-sm">

                <div id="taskSummaryContainer">
                    @Html.Partial("_EmpTaskListPartial", Model)
                </div>
            </div>
        </div> *@


    </div>

</div>

