@model AttendanceCRM.Models.DTOS.AttendanceViewModel

@{
    var istTimeZone = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
    var punchInTime = Model.PunchInTime.HasValue
        ? TimeZoneInfo.ConvertTimeFromUtc(Model.PunchInTime.Value, istTimeZone)
        : (DateTime?)null;
}



<style type="text/css">
    .attendance-circle-progress {
        position: relative;
        width: 150px; /* Adjust size as needed */
        height: 150px;
        border-radius: 50%;
        overflow: hidden;
        border: 3px solid #ADD8E6;
        background: #e0e0e0;
    }

        /* Water fill element that will grow from the bottom */
        .attendance-circle-progress .water-fill {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 0%; /* Starts empty */
            background: #ADD8E6; /* Water color (light blue) */
            z-index: 1;
            transition: height 1s ease; /* Smooth transition on height update */
        }

        /* Center the total work hours text */
        .attendance-circle-progress .total-work-hours {
            position: absolute;
            z-index: 2;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #333;
            font-weight: bold;
        }

    .progress-clock {
        position: relative;
        width: 150px;
        height: 150px;
        margin: auto;
    }

    .progress-ring {
        transform: rotate(-90deg);
    }

    .progress-ring__circle-bg {
        fill: transparent;
        stroke: #e6f0f8;
        stroke-width: 10;
    }

    .progress-ring__circle {
        fill: transparent;
        stroke: #2196f3;
        stroke-width: 10;
        stroke-linecap: round;
        transition: stroke-dashoffset 0.5s;
    }

    .progress-label {
        position: absolute;
        top: 0;
        left: 0;
        width: 150px;
        height: 150px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

        .progress-label span {
            font-size: 14px;
            color: #333;
        }

        .progress-label h6 {
            margin: 0;
            font-size: 18px;
            font-weight: bold;
            color: #000;
        }
</style>
<style>
    .notepad-popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        border: 2px solid #007bff;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        width: 400px;
        max-width: 90vw;
        z-index: 1050;
        display: none;
    }

    .notepad-header {
        background: #007bff;
        color: white;
        padding: 12px 16px;
        border-radius: 6px 6px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .notepad-body {
        padding: 16px;
    }

    .notepad-textarea {
        width: 100%;
        height: 200px;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 8px;
        font-family: monospace;
        resize: vertical;
    }

    .notepad-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 1040;
        display: none;
    }

    .close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 20px;
        cursor: pointer;
        padding: 0;
        width: 25px;
        height: 25px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .close-btn:hover {
            background: rgba(255,255,255,0.2);
        }
</style>



<script>
    let timerInterval = null;
     let punchAction = null;
     let currentLocation = null;

     document.addEventListener("DOMContentLoaded", function () {
         checkAttendanceStatus();
         fetchTodayPunchInfo();
     });

     function managePunchButtons(canPunchIn, isPunchedIn, alreadyPunchedOut) {
         const punchInBtn = document.getElementById("punchInBtn");
         const punchOutBtn = document.getElementById("punchOutBtn");

         if (canPunchIn) {
             punchInBtn.style.display = "inline-block";
             punchOutBtn.style.display = "none";
         } else if (isPunchedIn) {
             punchInBtn.style.display = "none";
             punchOutBtn.style.display = "inline-block";
         } else if (alreadyPunchedOut) {
             punchInBtn.style.display = "none";
             punchOutBtn.style.display = "none";
             stopWorkHoursTimer();
         }
     }

     function checkAttendanceStatus() {
         fetch('/Home/GetAttendanceStatus')
             .then(res => res.json())
             .then(data => {
                 managePunchButtons(data.canPunchIn, data.isPunchedIn, data.alreadyPunchedOut);
                   if (data.punchInTime) {
         if (!data.alreadyPunchedOut) {
             startWorkHoursTimer(data.punchInTime);
         } else {
             stopWorkHoursTimer();
             document.getElementById("total-work-hours").innerText = data.totalHours || "00:00:00";
         }
     } else {
         stopWorkHoursTimer();
     }

             })
             .catch(err => console.error("Status check error:", err));
     }

     // function fetchTodayPunchInfo() {
     //     fetch('/Home/GetTodayPunchInfo')
     //         .then(res => res.json())
     //         .then(data => {
     //             if (data.success) {
     //                 if (data.punchInTime && data.punchOutTime) {
     //                     stopWorkHoursTimer();
     //                     document.getElementById("total-work-hours").innerText = data.totalHours || "00:00:00";
     //                 }
     //             }
     //         })
     //         .catch(err => console.error("Error fetching punch info:", err));
     // }

     function startPunch(action) {
         punchAction = action;
         if (!navigator.geolocation) {
             alert("Geolocation not supported.");
             return;
         }
         navigator.geolocation.getCurrentPosition(
             pos => {
                 currentLocation = pos.coords;
                 openCamera();
             },
             () => alert("Location permission denied.")
         );
     }

     function openCamera() {
         const video = document.getElementById("cameraStream");
         const modal = document.getElementById("selfieModal");
         const timerDisplay = document.getElementById("selfieTimer");

         modal.style.display = "block";
         timerDisplay.innerText = "Capturing selfie in 5 seconds...";

         navigator.mediaDevices.getUserMedia({ video: { facingMode: "user" } })
             .then(stream => {
                 video.srcObject = stream;
                 let countdown = 5;
                 const intervalId = setInterval(() => {
                     countdown--;
                     timerDisplay.innerText = `Capturing selfie in ${countdown} seconds...`;
                     if (countdown === 0) {
                         clearInterval(intervalId);
                         captureSelfie();
                     }
                 }, 1000);
             })
             .catch(err => {
                 console.error("Camera error:", err);
                 alert("Camera access error.");
             });
     }

     function captureSelfie() {
         const canvas = document.getElementById("selfieCanvas");
         const context = canvas.getContext("2d");
         const video = document.getElementById("cameraStream");

         context.drawImage(video, 0, 0, canvas.width, canvas.height);
         stopCameraStream();
         document.getElementById("selfieModal").style.display = "none";

         const dataUrl = canvas.toDataURL("image/jpeg");
         const blob = dataURItoBlob(dataUrl);
         const formData = new FormData();

         formData.append("ActionType", punchAction);
         formData.append("Latitude", currentLocation?.latitude || 0);
         formData.append("Longitude", currentLocation?.longitude || 0);
         formData.append("Selfie", blob, "selfie.jpg");
         formData.append("WorkType", document.getElementById("workType")?.value || "");
         formData.append("WFHReason", document.getElementById("wfhReason")?.value || "");

         const url = punchAction === "in" ? "/Home/PunchIn" : "/Home/PunchOut";

         fetch(url, {
             method: "POST",
             body: formData
         })
             .then(res => res.json())
             .then(data => {
                 alert(data.message || "Success!");
                 stopCameraStream();
                 checkAttendanceStatus();
                 fetchTodayPunchInfo();
             })
             .catch(err => {
                 console.error("Punch failed:", err);
                 alert("Punch failed.");
             });
     }

     function startWorkHoursTimer(punchInTime) {
         stopWorkHoursTimer();
         const start = new Date(punchInTime);
         timerInterval = setInterval(() => {
             const now = new Date();
             const diff = now - start;
             const h = String(Math.floor(diff / 3600000)).padStart(2, '0');
             const m = String(Math.floor((diff % 3600000) / 60000)).padStart(2, '0');
             const s = String(Math.floor((diff % 60000) / 1000)).padStart(2, '0');
             document.getElementById("total-work-hours").innerText = `${h}:${m}:${s}`;
         }, 1000);
     }

     function stopWorkHoursTimer() {
         if (timerInterval) clearInterval(timerInterval);
         timerInterval = null;
         document.getElementById("total-work-hours").innerText = "00:00:00";
     }

     function stopCameraStream() {
         const video = document.getElementById("cameraStream");
         const tracks = video?.srcObject?.getTracks();
         if (tracks) tracks.forEach(track => track.stop());
         video.srcObject = null;
     }

     function dataURItoBlob(dataURI) {
         const byteString = atob(dataURI.split(',')[1]);
         const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
         const ab = new ArrayBuffer(byteString.length);
         const ia = new Uint8Array(ab);
         for (let i = 0; i < byteString.length; i++) {
             ia[i] = byteString.charCodeAt(i);
         }
         return new Blob([ab], { type: mimeString });
     }

     function fetchTodayPunchInfo() {
         fetch('/Home/GetTodayPunchInfo')
             .then(res => res.json())
             .then(data => {
                 if (data.success) {
                     document.getElementById('punchInfoTable').style.display = 'block';

                     if (data.punchInTime) {
                         document.getElementById('punchInRow').style.display = 'table-row';
                         document.getElementById('punchInTime').textContent = data.punchInTime;
                         document.getElementById('punchInSelfie').src = data.punchInSelfie;
                         document.getElementById('punchInMap').src = data.punchInLocation;
                     }

                     if (data.punchOutTime) {
                         document.getElementById('punchOutRow').style.display = 'table-row';
                         document.getElementById('punchOutTime').textContent = data.punchOutTime;
                         document.getElementById('punchOutSelfie').src = data.punchOutSelfie;
                         document.getElementById('punchOutMap').src = data.punchOutLocation;
                     }
                 }
             })
             .catch(err => console.error("Error fetching punch info:", err));
     }
</script>

<script>
    $(document).ready(function () {
        loadNotifications();

        function loadNotifications() {
            $.get("/Home/GetNotifications", function (response) {
                if (response.success) {
                    let notificationList = $("#notificationList");
                    let notificationCount = $("#notificationCount");

                    notificationList.find("li:not(:first)").remove();

                    if (response.wishes.length > 0) {
                        notificationCount.text(response.wishes.length).removeClass("d-none");
                        response.wishes.forEach(function (wish) {
                            notificationList.append(`
                                    <li class="dropdown-item text-success">
                                        ${wish.message} <br>
                                        <small class="text-muted">${wish.createdOn}</small>
                                    </li>
                                `);
                        });
                    } else {
                        notificationList.append(`<li class="dropdown-item text-muted">No new notifications</li>`);
                        notificationCount.addClass("d-none");
                    }
                }
            });
        }

        $('#yearDropdown').change(function () {
            var selectedYear = $(this).val();
            $.ajax({
                url: '/Home/Index',
                type: 'GET',
                data: { year: selectedYear },
                success: function (response) {
                    // handle page update if needed
                    location.reload();
                }
            });
        });
    });
</script>
<script>
    function showPunchInTime() {
        const punchInInfo = document.getElementById('punch-in-info');
        const punchInTime = document.getElementById('punch-in-time');

        const now = new Date();
        const formattedTime = now.toLocaleTimeString('en-IN', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });

        punchInTime.textContent = formattedTime;
        punchInInfo.style.display = 'flex'; // Show it
    }

    // Call the function on page load
    showPunchInTime();
</script>



<script>
        document.addEventListener('DOMContentLoaded', function() {
           let selectedWFHReason = "";

    // Triggered when dropdown changes
    const workTypeElement = document.getElementById("workType");
    if (workTypeElement) {
        workTypeElement.addEventListener("change", function () {
            if (this.value === "WFH") {
                const wfhModal = document.getElementById("wfhModal");
                if (wfhModal) {
                    wfhModal.showModal();
                }
            }
        });
    } else {
        console.error("workType element not found");
    }
    });

    // Called when "Continue" is clicked in WFH modal
    function submitWFHReason() {
        const reasonText = document.getElementById("wfhReason").value.trim();

        if (!reasonText) {
            alert("Please enter a reason for WFH.");
            return;
        }

        selectedWFHReason = reasonText;

        // Close the WFH reason modal
        const wfhModalElement = document.getElementById('wfhReasonModal');
        const wfhModalInstance = bootstrap.Modal.getInstance(wfhModalElement);
        wfhModalInstance.hide();

        // Wait for the modal to fully close, then show selfie modal
        setTimeout(() => {
            const selfieModal = new bootstrap.Modal(document.getElementById('selfieModal'));
            selfieModal.show();
        }, 500);
    }
</script>
<script>
    let notepadContent = '';

    function onWorkTypeChange(select) {
        const selectedValue = select.value;

        if (selectedValue === 'WFH') {
            openNotepad();
        }

        console.log('Work type changed to:', selectedValue);
    }

    function openNotepad() {
        const popup = document.getElementById('notepadPopup');
        const overlay = document.getElementById('notepadOverlay');
        const textarea = document.getElementById('notepadText');

        // Restore saved content
        textarea.value = notepadContent;

        popup.style.display = 'block';
        overlay.style.display = 'block';

        // Focus on textarea
        setTimeout(() => {
            textarea.focus();
        }, 100);
    }

    function closeNotepad() {
        const popup = document.getElementById('notepadPopup');
        const overlay = document.getElementById('notepadOverlay');

        popup.style.display = 'none';
        overlay.style.display = 'none';
    }

    function saveNotepad() {
        const textarea = document.getElementById('notepadText');
        notepadContent = textarea.value;

        alert('Reason saved successfully!');
        console.log('Saved notes:', notepadContent);
    }

    function clearNotepad() {
        if (confirm('Are you sure you want to clear all notes?')) {
            document.getElementById('notepadText').value = '';
        }
    }

    // Close popup when pressing Escape key
    document.addEventListener('keydown', function (event) {
        if (event.key === 'Escape') {
            closeNotepad();
        }
    });
</script>






<!-- Breadcrumb -->
<div class="d-md-flex d-block align-items-center justify-content-between page-breadcrumb mb-3">
    <div class="d-flex align-items-center justify-content-between w-100">
        <!-- Left Section: Dashboard Title -->
        <h4 class="mb-1">Employee Dashboard</h4>

        <!-- Right Section: Notification Bell -->
        <div class="nav-item dropdown">
            <a class="nav-link position-relative" href="#" id="notificationDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fa-solid fa-bell"></i>
                <span id="notificationCount" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none">
                    0
                </span>
            </a>

            <!-- Notification Dropdown -->
            <ul class="dropdown-menu dropdown-menu-end p-2" aria-labelledby="notificationDropdown" id="notificationList">
                <li><h6 class="dropdown-header text-danger">Notifications</h6></li> <!-- Added text-danger -->
            </ul>

        </div>
    </div>
</div>


<div class="row">
    <!-- Attendance & Punch Controls -->
    <div class="col-xl-4 d-flex">
        <div class="card flex-fill border-primary attendance-bg">
            <div class="card-body">
                <div class="mb-2 text-center">
                    <h6 class="fw-medium text-gray-5 mb-1">Attendance</h6>
                    <h4>@Model.UserName</h4>
                </div>

                <!-- Progress Circle -->
                <div class="progress-clock mb-2">
                    <svg class="progress-ring" width="150" height="150">
                        <circle class="progress-ring__circle-bg" r="70" cx="75" cy="75" />
                        <circle class="progress-ring__circle" r="70" cx="75" cy="75" />
                    </svg>
                    <div class="progress-label">
                        <span>Total Hours</span>
                        <h6 id="total-work-hours">00:30:20</h6>
                    </div>
                </div>

                <!-- Punch Info -->
                <div class="text-center">
                    <h6 id="punch-in-info" class="fw-medium d-flex align-items-center justify-content-center mb-1"
                        style="display: none; gap: 8px; padding: 10px; background: #f8f9fa; border-radius: 5px; font-size:14px;">
                        <i class="ti ti-fingerprint text-primary"></i>
                        <span>Punched In at</span>
                        <span id="punch-in-time" class="fw-bold ms-1"></span>
                    </h6>
                </div>




                @*   <!-- Work Type -->
                    <div class="mb-3">
                        <label for="workType" class="form-label fw-medium">Work Type</label>
                        <select id="workType" class="form-select text-center mx-auto" style="max-width: 200px;" onchange="onWorkTypeChange(this)">
                            <option value="WFO" selected>WFO</option>
                            <option value="WFH">WFH</option>
                        </select>
                    </div> *@


                <div class="container mt-1">
                    <div class="row justify-content-center">
                        <div class="col-md-6">
                            <!-- Work Type -->
                            <div class="mb-3">
                                <label for="workType" class="form-label fw-medium">Work Type</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <select id="workType" class="form-select text-center mx-auto" style="max-width: 200px;" onchange="onWorkTypeChange(this)">
                                <option value="WFO" selected>WFO</option>
                                <option value="WFH">WFH</option>
                            </select>

                        </div>
                    </div>
                </div>

                <!-- Overlay -->
                <div class="notepad-overlay" id="notepadOverlay" onclick="closeNotepad()"></div>

                <!-- Notepad Popup -->
                <div class="notepad-popup" id="notepadPopup">
                    <div class="notepad-header">
                        <h6 class="mb-0">Reason For WFH</h6>
                        <button class="close-btn" onclick="closeNotepad()" title="Close">×</button>
                    </div>
                    <div class="notepad-body">
                        <textarea class="notepad-textarea" id="notepadText" placeholder="Enter your WFH Reason here..."></textarea>
                        <div class="mt-3 d-flex justify-content-end gap-2">
                            <button class="btn btn-secondary btn-sm" onclick="clearNotepad()">Clear</button>
                            <button class="btn btn-primary btn-sm" onclick="saveNotepad()">Save</button>
                            <button class="btn btn-outline-secondary btn-sm" onclick="closeNotepad()">Close</button>
                        </div>
                    </div>
                </div>



                <!-- Selfie Modal -->
                <div id="selfieModal" style="display:none; text-align:center; padding: 20px;">
                    <video id="cameraStream" autoplay playsinline width="300" height="300" style="border-radius: 10px; border: 2px solid #ccc;"></video>
                    <div id="selfieTimer" class="mt-2 text-danger fw-bold"></div>
                    <canvas id="selfieCanvas" width="300" height="300" style="display:none;"></canvas>
                </div>

                <!-- Punch Buttons -->
                <div class="text-center">
                    <button id="punchInBtn" onclick="startPunch('in')" class="btn btn-primary">Punch In</button>
                    <button id="punchOutBtn" onclick="startPunch('out')" class="btn btn-danger" style="display:none;">Punch Out</button>
                </div>

            </div>
        </div>

    </div>

    <!-- Employee Profile Info -->
    <div class="col-xl-4 d-flex">
        <div class="card flex-fill">
            <div class="card-header bg-dark d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <span class="avatar avatar-lg bg-dark rounded-circle">
                        <img src="@Url.Content("~/UploadedImages/" + @Model.ProfilePicture)" class="img-fluid" style="width: 50px; height: 50px; border-radius: 50%;" alt="Img">
                    </span>
                    <div class="ms-3">
                        <h5 class="text-white mb-1">@Model.UserName</h5>
                        <p class="text-white fs-12 mb-0">@Model.Designation</p>
                    </div>
                </div>
                <a href="~/Home/EditUserempdash?userid=@Model.UserId" class="btn btn-icon btn-sm text-white rounded-circle edit-top">
                    <i class="ti ti-edit"></i>
                </a>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <span class="d-block mb-1 fs-13">Phone Number</span>
                    <p class="text-gray-9">@Model.MobileNumber</p>
                </div>
                <div class="mb-3">
                    <span class="d-block mb-1 fs-13">Email Address</span>
                    <p class="text-gray-9">@Model.Email</p>
                </div>
                <div class="mb-3">
                    <span class="d-block mb-1 fs-13">Employee Id</span>
                    <p class="text-gray-9">@Model.EmployeeId</p>
                </div>
                <div>
                    <span class="d-block mb-1 fs-13">Joined on</span>
                    <p class="text-gray-9">@(Model.DateOfJoining?.ToString("yyyy-MM-dd"))</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Leave Details -->
    <div class="col-xl-4 d-flex">
        <div class="card flex-fill">
            <div class="card-header d-flex align-items-center justify-content-between flex-wrap row-gap-2">
                <h5>Leave Details</h5>
                <select id="yearDropdown" class="form-control" style="max-width: 120px;">
                    @for (int i = DateTime.Now.Year; i >= DateTime.Now.Year - 5; i--)
                    {
                        <option value="@i" selected="@(i == (ViewBag.SelectedYear ?? DateTime.Now.Year) ? "selected" : null)">
                            @i
                        </option>
                    }
                </select>
            </div>
            <div class="card-body" id="leaveDetails">
                <div class="row">
                    <div class="col-sm-6 mb-3"><span>Total Leaves</span><h4 id="totalLeaves">@Model.TotalLeaves</h4></div>
                    <div class="col-sm-6 mb-3"><span>Taken</span><h4 id="takenLeaves">@Model.Taken</h4></div>
                    <div class="col-sm-6 mb-3"><span>Absent</span><h4 id="absentLeaves">@Model.Absent</h4></div>
                    <div class="col-sm-6 mb-3"><span>Request</span><h4 id="requestedLeaves">@Model.Requests</h4></div>
                    <div class="col-sm-6 mb-3"><span>Worked Days</span><h4 id="workedDays">@Model.WorkedDays</h4></div>
                    <div class="col-sm-6 mb-3"><span>Loss of Pay</span><h4 id="lossOfPay">@Model.LossOfPay</h4></div>
                    <div class="col-sm-12">
                        <a href="~/Common/ApplyLeave" class="btn btn-dark w-100 mt-2">Apply Leave</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Punch Info Table -->
<div id="punchInfoTable" class="mt-4" style="display: none;">
    <table class="table table-bordered text-center">
        <thead>
            <tr>
                <th>Type</th>
                <th>Selfie</th>
                <th>Time</th>
                <th>Location</th>
            </tr>
        </thead>
        <tbody>
            <tr id="punchInRow" style="display: none;">
                <td>Punch In</td>
                <td><img id="punchInSelfie" style="width: 100px; height: auto; border-radius: 8px;" /></td>
                <td id="punchInTime"></td>
                <td><iframe id="punchInMap" width="200" height="150" style="border:0;" loading="lazy"></iframe></td>
            </tr>
            <tr id="punchOutRow" style="display: none;">
                <td>Punch Out</td>
                <td><img id="punchOutSelfie" style="width: 100px; height: auto; border-radius: 8px;" /></td>
                <td id="punchOutTime"></td>
                <td><iframe id="punchOutMap" width="200" height="150" style="border:0;" loading="lazy"></iframe></td>
            </tr>
        </tbody>
    </table>
</div>

<div class="card bg-warning">
    <div class="card-body d-flex align-items-center justify-content-between p-3">
        <div>
            <h5 class="mb-1">Next Holiday</h5>
            <p class="text-secondary">@ViewBag.NextHolidayName, @ViewBag.NextHolidayDate</p>
        </div>

        @if (ViewBag.UserDetails?.userTypeName == "SuperAdmin" || ViewBag.UserDetails?.userTypeName == "Admin" || ViewBag.UserDetails?.userTypeName == "HR")
        {
            <a href="@Url.Action("HolidaysList", "Common")" class="btn btn-light btn-sm px-3" aria-label="View all holidays">View All</a>
        }
        else if (ViewBag.UserDetails?.userTypeName == "Employee")
        {
            <a href="@Url.Action("HolidaysListempdash", "Home")" class="btn btn-light btn-sm px-3" aria-label="View all holidays">View All</a>
        }

    </div>
</div>


<div class="row">
    <div class="col-xl-4 d-flex">
        <div class="card card-bg-8 bg-dark mb-3">
            <div class="card-header">
                <h5 class="card-title text-white">Birthday Wishes</h5>
            </div>
            <div class="card-body">
                @if (TempData["BirthdayWishMessage"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <strong> @TempData["BirthdayWishMessage"]</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }

                @if (ViewBag.MonthlyBirthdays != null && ViewBag.MonthlyBirthdays.Count > 0)
                {
                    <!-- Bootstrap Carousel -->
                    <div id="birthdayCarousel" class="carousel slide" data-bs-ride="carousel">
                        <!-- Indicators -->
                        <ol class="carousel-indicators">
                            @for (int i = 0; i < ViewBag.MonthlyBirthdays.Count; i++)
                            {
                                <li data-bs-target="#birthdayCarousel" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                            }
                        </ol>

                        <!-- Carousel Items -->
                        <div class="carousel-inner">
                            @for (int i = 0; i < ViewBag.MonthlyBirthdays.Count; i++)
                            {
                                var birthday = ViewBag.MonthlyBirthdays[i];
                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                    <div class="card bg-dark text-center p-3">
                                        <span class="avatar avatar-xl avatar-rounded mb-2">
                                            <img src="@Url.Content("~/UploadedImages/" + birthday.ProfilePicture)"
                                                 class="img-fluid"
                                                 style="width: 70px; height: 70px; border-radius: 50%;"
                                                 alt="Img">
                                        </span>
                                        <h6 class="text-white fw-medium mb-1">@birthday.UserName</h6>
                                        <p class="text-white">@birthday.Designation</p>
                                        <form method="post" asp-action="SendWishes" asp-controller="Home">
                                            <input type="hidden" name="userId" value="@birthday.UserId" />
                                            <button type="submit" class="btn btn-sm btn-primary">Send Wishes</button>
                                        </form>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Controls (Prev / Next) -->
                        <button class="carousel-control-prev small-btn" type="button" data-bs-target="#birthdayCarousel" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon"></span>
                        </button>
                        <button class="carousel-control-next small-btn" type="button" data-bs-target="#birthdayCarousel" data-bs-slide="next">
                            <span class="carousel-control-next-icon"></span>
                        </button>
                    </div>
                }
                else
                {
                    <div>
                        <h5 class="text-white text-center">🎉 No birthdays today 🎉</h5>
                    </div>

                }
            </div>
        </div>
    </div>
</div>
<!-- WFH Reason Modal -->
<div class="modal fade" id="wfhReasonModal" tabindex="-1" aria-labelledby="wfhReasonLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">WFH Reason</h5>
            </div>
            <div class="modal-body">
                <textarea id="wfhReason" class="form-control" rows="4" placeholder="Enter reason for WFH..."></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitWFHReason()">Continue</button>
            </div>
        </div>
    </div>
</div>








